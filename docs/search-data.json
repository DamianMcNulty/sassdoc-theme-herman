[{"filename":"index.html","title":"Herman Documentation","contents":"View Project View Source Herman [a SassDoc theme] “If it’s not documented, it doesn’t exist. Documentation should become the default, an integrated part of the development process.” —Miriam Suzanne At OddBird, we wanted better tools for documenting the entire front end of a project – from brand guidelines to UX patterns and code APIs: Documenting the intersection of languages and styles Written directly in the code, and integrated with code architecture Automated for a document that grows and changes along with the life of your project Herman is built as an extension to SassDoc, and supports all their core functionality with additional support for font specimens, color palettes, sizes and ratios, SVG icons, compiled languages, Nunjucks/Jinja macros, HTML previews, and more. Getting Started npm install sassdoc sassdoc-theme-herman See the SassDoc documentation to install SassDoc and run it via various build tools. Specify herman as the theme in your SassDoc options: sassdoc <src> --theme herman SassDoc Comments Currently, all SassDoc/Herman annotations are written as Sass comments starting with /// to differentiate documentation from other developer comments (//). // This comment will be ignored by Herman /// This comment will be rendered in the documentation Annotation comments can be free-floating, or attached to a particular Sass/CSS object – such as a variable, mixin, function, or selector block. /// this is a free-floating comment /// this comment is attached to the following mixin code-block @mixin sample-object { … } Herman Annotations In addition to the core SassDoc annotations, our @icons annotation allows you to display SVG icons from a given folder, and we extend the core @example annotation to display compiled Sass/Nunjucks output and render sample components. We also provide a @font annotation for displaying font-specimens, and a @preview annotation for displaying color-palettes, text and spacing sizes, and modular ratios. See the full documentation for details » SassDoc Extras Herman uses a number of SassDoc Extras: Description Display GroupName ShortcutIcon Sort ResolveVariables"},{"filename":"CHANGELOG.html","title":"Changelog","contents":"Herman Changelog Unreleased NEW: Add additional files (parsed as Markdown) with extraDocs option – #117 CHANGE: JSON-export functionality is now built in using the herman-export mixin. Sass-json-export integration should continue to work as expected. Updated dependencies. BREAKING: Remove subprojects option; replace with extraLinks option – #175 BREAKING: Removed @macro annotation; use @example njk instead – #182 CHANGE: HTML assets are no longer minified – #186 CHANGE: Replace marked with markdown-it for Markdown parsing with quote beautification – #119 NEW: Add “widont” text transformations with typogr. BUGFIX: Ensure consistent ordering of extraDocs. BREAKING: @icons annotation only requires path to a folder of SVG icons – #47 BREAKING: Replace minifiedIcons option with customHTML option (only included in rendered @example annotations). BREAKING: Nest templatepath and nunjucksEnv options under new nunjucks options object: nunjucks.templatepath and nunjucks.environment. NEW: Add attribution/link to Herman/OddBird in nav footer – #154 CHANGE: Use Herman logo for favicon. – #155 NEW: Add site-wide search – #28 1.0.0-alpha.15: 2017-10-30 BUGFIX: Do not error if local file (referenced from customCSS) is not found BUGFIX: Do not output duplicate custom @font HTML in @example iframe 1.0.0-alpha.14: 2017-10-27 BREAKING: Remove accoutrement-add as a public utility, since Sass 3.5+ modular sytems will make it unusable. Updated dependencies. BUGFIX: Fix broken internal links – #106 BREAKING: Group navigation is ordered according to config groups order – #150 BUGFIX: Do not error if sass config option is undefined. BUGFIX: Do not break layout on fonts with single-item stack – #172 BREAKING: @preview font-specimen is replaced by new @font annotation. BREAKING: Removed customHead option; replaced by multiline @font annotation. BUGFIX: Fix assets referenced with relative urls in client-provided customCSS for @example annotations – #174 1.0.0-alpha.13: 2017-09-25 BREAKING: $herman export map structure is now organized by type, in nested maps: colors, sizes, ratios, and fonts. BREAKING: herman-add mixin now requires an initial $type argument, in order to assign the given data to the proper nested data-type map. 1.0.0-alpha.12: 2017-09-18 BUGFIX: Typo from updating to latest accoutrement-scale BUGFIX: Improved internal logic for herman-map-compile mixin 1.0.0-alpha.11: 2017-09-18 BUGFIX: Do not error on prose blocks without item.context.name 1.0.0-alpha.10: 2017-09-14 BREAKING: Rename $json to $herman for clearer name-spacing BREAKING: _herman-inspect, and _herman-str-replace are now considered private functions BREAKING: herman-map-compile always returns inspected (json-ready) values, and now accepts function args BREAKING: Remove herman-add-colors/-sizes/-ratios/-font from utils BREAKING: Require Node >= 6.0.0 NEW: Use herman-add($key, $map, $args…) to add maps directly to $herman, with optional function/args to compile raw map values NEW: Use accoutrement-add($type, $key, $map) to automate compilation of accoutrement (color, ratio, size, font) maps, while adding to both $herman and the appropriate accoutrement global ($colors, $ratios, $sizes, $fonts). NEW: displayColors option (type: Array, default: ['hex', 'rgb', 'hsl']) CHANGE: Group identical colors in color-palette – #123 BUGFIX: Fix blocks with multi-line selectors and custom @name annotations – #140 DOCS: Move to docs/ and include in repo. 1.0.0-alpha.9: 2017-06-29 BUGFIX: Remove non-standard html markup on prose blocks 1.0.0-alpha.8: 2017-06-28 BUGFIX: Remove un-used font files from distribution Render sassdoc comments that aren’t attached to a Sass block as Markdown prose. Preserve the original order of sassdoc comments rather than grouping by type. 1.0.0-alpha.7: 2017-06-16 BUGFIX: Render icon previews in iframes. BUGFIX: Adjusted styles for navigation and text. BUGFIX: Added styles for blockquotes. BREAKING: minifiedIcons option and the first argument to the @icons annotation are both paths relative to the project directory, no longer relative to the templatepath option. 1.0.0-alpha.6: 2017-06-14 BREAKING: Render examples in iframes and only include custom CSS in those iframes, for better isolation. 1.0.0-alpha.5: 2017-06-08 BUGFIX: Style cleanup for code-blocks, examples, and properties BUGFIX: UsedBy list is aware of display.alias to unlink hidden aliases 1.0.0-alpha.4: 2017-06-02 BREAKING: Move customHead option into herman options object. BUGFIX: Return correct promise from theme function (fixes early resolution). 1.0.0-alpha.3: 2017-05-31 Use GoogleFonts rather than shipping font files Add support for remaining SassDoc annotations: @throw, @return, @output, @content, @since, @deprecated, @author Provide more samples 1.0.0-alpha.2: 2017-05-31 BUGFIX: Show compiled html/css @example even if only one type. 1.0.0-alpha.1: 2017-05-29 Display links on index pages to project home and source, when defined in the project package.json – #91 Clean up display of parameters and properties – #53 and #49 and #55 Display source and compiled code (njk and html; scss and css) side-by-side – #65 Add support for @todo annotation – #18 Add support for @type annotation – #19 Add support for @alias (and aliased callback) annotation – #5 Add support for used-by (@require annotation callbacks). Show compiled CSS for @example scss annotations – #37 BREAKING: Nest Herman-specific options under herman object in sassdoc configuration, and Sass-specific options under herman.sass object. Re-brand with sidebar navigation – #58 and #69. Add support for rendering documentation from dependency subprojects – #61. BUGFIX: Do not link to internal @access private items if display option is set to access: ['public']. BUGFIX: Do not error if missing herman.subprojects option – #107. BUGFIX: Do not error if missing herman options – #108. 0.5.5: 2017-02-22 Fix @example macro to work with sassdoc v2.2.0. See https://github.com/SassDoc/sassdoc/commit/842847493f9644e50f9e2ce783eacf886ccf69a0. 0.5.4: 2017-01-16 Render type html examples to HTML – #45. 0.5.3: 2016-12-22 Prevent template render errors when data is missing. Fixes #44. 0.5.2: 2016-12-15 Change absolute @see links to relative paths, so we’re not assuming a root URL for the styleguide. Add customHead option to add custom HTML to the <head>. 0.5.1: 2016-12-13 Add optional show argument for font-specimen previews – @preview font-specimen; show: regular, bold, bold italic – allowing you to override what variants are displayed in the specimen. 0.5.0: 2016-12-09 Add table output for @property annotation, similar to @parameter table output. Standardize data-sassdoc-display='<annotation>' for annotation display blocks (previously a mix of data-sassdoc values), and data-sassdoc-table'<annotation>' for tables (previously data-sassdoc='<annotation>-table'). 0.4.0: 2016-11-08 Inject preview data directly into HTML, so that previews don’t have to be styled locally Add Sass Utilities file, for help with setting/exporting Sass data herman-add-color mixin now exports hex, rgba, and hsla colors. Simplified font previews don’t require size input Color, font, ratio, and size previews accept key argument, in case the JSON key doesn’t match the variable name (most common for fonts) Ratio preview accets count argument [1-10], determining how many instances of the ratio to display (default is 6) Size preview accepts style argument [text | ruler | output-only], determining the type of preview to display (default is text, see scale for examples) 0.3.2: 2016-09-29 Mark imported minifiedIcons file as |safe. 0.3.1: 2016-09-14 Added nunjucksEnv option to use a custom nunjucks environment. Added jinja syntax highlighting for @example njk code blocks. 0.3.0: 2016-08-17 Added rendering of @example annotations using the njk (nunjucks) language. Removed rendering of macro examples using macroname_data. 0.2.1: 2015-12-23 Updated dependencies. 0.2.0: 2015-12-17 Add @icons annotation. Add @preview annotation for color palettes and font specimens. Add syntax highlighting of code blocks. 0.1.0: 2015-11-25 Initial release. @macro annotation and basic infrastructure."},{"filename":"CONFIGURATION.html","title":"Configuration","contents":"Herman Configuration Options Nest all Herman-specific options under herman object in SassDoc config. # .sassdocrc theme: herman herman: extraDocs: [...] // Node API const sassdoc = require('sassdoc'); sassdoc('./scss', { theme: 'herman', herman: { extraDocs: [...] } }); All relative paths are relative to the SassDoc config file or the cwd. extraDocs Type: Array Default: [] Add files (parsed as Markdown) to your compiled documentation. Each value in the list should be an Object with keys path (relative path to the local file) and name (displayed in the compiled documentation navigation), or a String path (in which case the filename will be displayed in the navigation). This is useful for including additional documents, such as a changelog, quickstart guide, or instructions for contributing. extraLinks Type: Array Default: [] Add external links to your compiled documentation navigation. Each value in the list should be an Object with keys name and url. This is useful for linking to additional documentation for dependencies or other third-party integrations. displayColors Type: Array Default: ['hex', 'rgb', 'hsl'] Configures which color value formats are shown when using the @preview color-palette annotation. Valid options: hex, rgb/rgba, hsl/hsla customCSS Type: String Default: '' Relative path to a custom CSS file, which will be included in the <head> of rendered @example annotations. Notes: If your custom CSS includes webfonts which require additional <script> or <style> tags (e.g. an external Google Fonts stylesheet or Adobe Typekit JavaScript), you must document those fonts with the @font annotation (providing the required extra HTML) for them to display properly within rendered @example annotations. See our @font documentation. If your custom CSS contains internal links referenced with url(...) (e.g. local fonts or background images), Herman will attempt to copy in those assets so that they are available in your rendered @example annotations. This means that the paths must either be absolute, or relative to the location of the CSS file itself. If using Webpack to bundle your Herman customCSS, this likely means disabling the publicPath setting for this CSS file (e.g. publicPath: ''), or disabling Webpack’s url() pre-processing entirely. customHTML Type: String Default: '' Custom HTML string (or relative path to a file containing valid HTML) to include at the top of the generated <body> tag for all rendered @example html and @example njk annotations. See our @example documentation. This is particularly useful for including svg sprite sheets in example output. fontpath Type: String Default: '' Required if using @font annotation with local font files. Relative path to a directory containing local font files. See our @font documentation. nunjucks Type: Object Default: {} Container for the following Nunjucks-related options: nunjucks.templatepath Type: String Default: '' Either nunjucks.templatepath or nunjucks.environment is required if using @example njk annotation. Relative path to a directory containing Nunjucks templates. nunjucks.environment Type: Nunjucks Environment instance Default: undefined Either nunjucks.templatepath or nunjucks.environment is required if using @example njk annotation. sass Type: Object Default: {} Container for the following sass-related options: sass.jsonfile Type: String Default: '' Required if using @font or @preview annotations. Relative path to a sass-json file (created with the herman-export mixin). The JSON contents will be added under the sassjson key of the sassdoc context, and used to display colors, fonts, ratios, and sizes. See Exporting Styles to JSON. sass.includepaths Type: Array Default: [] Array of paths used to resolve @import declarations. Passed through to node-sass when compiling @example sass/scss annotations. See our @example documentation. sass.includes Type: Array Default: [] List of files (relative to any sass.includepaths) to @import for all @example sass/scss annotations. See our @example documentation. This is useful for including any global Sass configuration and toolkit files that may be used by any example. It’s best to avoid files with output CSS, as that output will be displayed in every single Sass example."},{"filename":"CONTRIBUTING.html","title":"Contributing","contents":"Contributing to Herman Thanks for contributing to Herman development! Feature requests and bug reports can be filed on github: Write a title that summarizes the specific problem or feature request Introduce the problem with steps to reproduce Help reduce the problem to the smallest code sample possible, and provide the relevant code If you are contributing code with new features or bug-fixes: Fork the project, and create a branch for your contribution Follow the development guide below to get Herman running locally Write tests and documentation as necessary, and make sure all tests are passing Open a pull request on github We love having more people involved in the project, and everyone is welcome. As maintainers, we review all the code, and may provide feedback before accepting a PR. We’re happy to work with you to make this the best (and friendliest) project we can. Development To install the necessary Node dependencies, run yarn. You can lint the project’s JS with gulp eslint and run the JS unit tests with gulp test. You can lint Sass with gulp sasslint and run the Sass tests with gulp sasstest. To compile and minify the static assets – as well as generate the documentation – run gulp compile. Just running gulp will perform all of the above tasks. You can start up a local development server with gulp serve. This will also watch for changes to local files and automatically perform an appropriate selection of the above tasks whenever changes are detected to relevant files. Access the running server at http://localhost:3000. Refer to the gulpfile.js source and gulp documentation for more info. Code of Conduct As a company, we want to embrace the very differences that have made our collaborations successful, and work together to provide the best environment for learning, growing, working, and sharing ideas. It is imperative that OddBird continue to be a welcoming, challenging, fun, and fair place to contribute. See our Code of Conduct for details. We also recommend following the Sass community guidelines."},{"filename":"demo_sizes.html","title":"Ratios & Sizes","contents":"Documenting ratios and sizes In addition to documenting colors, you can use Herman to document and display ratios and sizes. In the end, Herman will need a map converted to JSON – but we’ll start with individual ratios/sizes, and build the export from there. Let’s start with a ratio and two sizes: $herman-ratio: 1.4; $root: 18px; $xlarge: 28px; $demo-ratios scss $demo-ratios: ( 'herman-ratio': $herman-ratio ); Description Preview ratios In order to export our ratios to Herman, we’ll want to combine them into maps of name/value pairs. Sass does not provide any shortcuts for automating this step, or removing the duplication, but you can use a tool like our Accoutrement-Scale to store and access ratios directly in a Herman-friendly map. $demo-ratios: ( 'herman-ratio': $herman-ratio ); Create as many maps as you like to organize different types of ratios – text, spacing, etc. Each map will be displayed individually, using the @preview ratios annotation: // @preview ratios; count: 4 The ratios preview accepts an optional count argument (defaults to 6) – the number of ratio calculations to display, up to a maximum of 10. Ratio Preview herman-ratio: 1.4 1 1.4 1.96 2.74 3.84 5.38 $demo-sizes scss $demo-sizes: ( 'root': $root, 'xlarge': $xlarge ); Description Preview sizes Similar to ratios, sizes can be combined into any number of maps to preview with Herman. you can build these maps out of existing variables, or use a tool like our [Accoutrement-Scale][scale] to store and access sizes directly in a Herman-friendly map. $demo-sizes: ( 'root': $root, 'xlarge': $xlarge ); Each map will be displayed individually, using the @preview sizes annotation: // @preview sizes; style: ruler The sizes preview accepts an optional style argument (defaulting to text), which specifies the type of output to display: text: Displays a sentence of lorem-ipsum text at the given size. ruler: Displays a pattern of shapes spaced at the given size. output-only: Displays values only, without demonstration. Size Previews root: 18px Pack my box with five dozen liquor jugs. xlarge: 28px Pack my box with five dozen liquor jugs. Add ratio/size data to $herman In order to preview the $demo-ratios and $demo-sizes maps, we also need to export the data to JSON. You can add data to the $herman export-map by hand, or use the provided herman-add mixin to combine existing maps into the proper structure. See the size/ratio map documentation for details » @include herman-add('ratios', 'demo-ratios', $demo-ratios); @include herman-add('sizes', 'demo-sizes', $demo-sizes); If your map needs to be parsed or compiled before export, you can pass additional compilation functions and arguments to herman-add. Once your data is all stored in the $herman map, it can be converted to JSON using herman-export. related Accoutrement-Scale [external] $herman @mixin herman-add() @mixin herman-export()"},{"filename":"demo_icons.html","title":"SVG Icons","contents":"Documenting SVG icons Given a folder of individual SVG icon files, you can use Herman to document and display your full icon set. // @icons assets/svg/ The icons annotation accepts one argument – a path to a directory containing icon svg files. Each icon will be rendered along with the filename and path. Herman doesn’t have many icons to preview… Icon Previews: assets/svg/"},{"filename":"demo_examples.html","title":"Rendered Examples","contents":"Extended SassDoc examples SassDoc provides the @example annotation for displaying example Sass code. We’ve expanded their feature to show compiled CSS alongside the Sass input, compile Nunjucks examples for templating, and render any input-or-compiled HTML so you can see the results. The resulting annotation syntax is identical to the original SassDoc feature. If you use the @example annotation with scss/sass (Sass) or njk (Nunjucks) languages, Herman will display the source of the example, along with the compiled output (and rendered html, if using njk or html languages). Both Sass & Nunjucks examples allow you to import external partials: // This is a widget that we use on our site… // @example scss // [data-widget] { // @include widget-style; // } // @example njk // {% import 'macros.njk' as macros %} // {{ macros.widget(1, 2) }} @mixin widget-style { … } Will display: Input Sass and Nunjucks code Compiled CSS and HTML output Rendered HTML in an iframe We hope to support Vue components in the near future, with an API for supporting additional languages. related @example Annotation Reference [external] Compiling Sass/Scss Example annotations with language set to sass or scss will be compiled by Herman, and display the output along with the source. All Sass examples must be complete and valid, with the ability to import Sass partials inside each example. In order for this to work with Sass/Scss, you must set an includepaths key in your sassdoc herman.sass configuration object – an array of places to look for Sass includes: herman: includepaths: - 'static/sass' - 'node_modules' You can also set an array of default includes (relative to any includepaths) to include for all Sass examples: # .sassdocrc (yaml) herman: sass: includepaths: - 'static/sass' includes: - 'utilities' - 'config/manifest' Generally, included Sass files should not contain any CSS output of their own, since all compiled output will be displayed with the @example. Example scss .sass { &-nesting { content: 'Example: Compiling Sass...'; } } css compiled .sass-nesting { content: 'Example: Compiling Sass...'; } Compiling Nunjucks Example annotations with language set to njk can also be compiled. In order for this to work, you must either specify a nunjucks.templatepath (the path where Nunjucks will look to import templates), or a nunjucks.environment (custom Nunjucks environment). Using a custom environment is particularly useful if your macros contain custom filters. Either can be established in your sassdoc herman configuration object: Setting nunjucks.templatepath: # .sassdocrc (yaml) herman: nunjucks: templatepath: 'templates' Setting nunjucks.environment: This is only possible if using the SassDoc Node API. const nunjucks = require('nunjucks'); const sassdoc = require('sassdoc'); const nunjucksEnv = nunjucks.configure('./templates'); sassdoc(src, { theme: 'herman', herman: { nunjucks: { environment: nunjucksEnv } } }); Example njk {% import 'utility.macros.j2' as utility %} {{ utility.link_if('This is a link', '#0') }}<br /> {{ utility.link_if('This is not a link', none) }} html compiled <a href=\"#0\">This is a link</a> <br /> <span>This is not a link</span>"},{"filename":"demo_test-sassdoc.html","title":"SassDoc Annotations","contents":"@function herman-sample() aliased as sample-alias(), sample-alias-two() Description This is a sample function. You can actually put much more text in here, and include markdown. Lorem markdownum rapite neque loquentis pro inque; nullaque triones promisistis quaque. Non iura oves creatas mixta gente torum Caune. Huius sacra corpora refert celeberrima luctus tibi cornua, nec qui illum poteram, et eundi recalfecit efficiens isdem superi. Alii virginibusque vultus certa socios venae ferrove finis longave, pignus duros nubifer! Tenuatus percussae tanta iudice Hippolytus miseram inmunis Ture Iovis holus est et vere Domus cum quid meae erras Quam apta fata puppis ergo solis praeteriti Since 1.0.0-alpha.1: Adding samples files to the documentation. Author: Miriam Suzanne Parameters & Return $one: (number) The first parameter is required, because no default is given $two: $one (number) Our second parameter defaults to the value of our first one $three: 'three' (string) Looks like this one takes a string instead @return (list) All three of the arguments in order @error Please provide values for all three parameters Example scss describe examples if you want… .example::before { content: herman-sample(1, 2); } css compiled .example::before { content: herman-sample(1, 2); } related OddBird Home Page [external] @function sample-alias() used by @function sample-alias() @function sample-alias-two() To-do List Create more samples like this one Add more todo items @function sample-alias() [deprecated] alias for herman-sample() Description This is a sample function alias. DEPRECATED: I don’t think this alias is useful anymore requires @function herman-sample() @function sample-alias-two() [deprecated] alias for herman-sample() Description This is a sample function alias. DEPRECATED: Doesn’t seem to work without a message requires @function herman-sample() Extra Commentary Herman allows you to write “prose” markdown blocks, to help introduce groups, or add narrative flow between documented items. Prose blocks can also include examples, and other annotations. Example scss @import 'samples/variables'; .private::after { content: $private; } css compiled .private::after { content: \"for internal use only\"; } related http://sassdoc.com/annotations/ [external] @mixin before-sample() Description Mixins can optionally accept a @content block, passed in brackets. This example creates a generated element :before the element it is used on. Parameters & Output $content: (String) A value for the content property $list…: (arglist) Sass also allows arglists! @content (code block) Any other styles that should be applied to the ::before element {CSS output} (code block) A ::before pseudo-element, with the content property established, and any passed-in styled applied. Example scss @import 'samples/mixins-functions'; .item { @include before-sample('Test One: ') { color: red; } } css compiled .item::before { content: \"Test One: \"; color: red; } $private (*) [private] scss $private: 'for internal use only'; Description Private variables will display unless you set access: ['public'] in your SassDoc config. used by $basic-value $map-value $basic-value (*) scss $basic-value: if(not 'social', $private, 'hello world'); Description The basics for documenting your average non-map variable. requires $private (*) [private] used by $map-value $map-value (map) scss $map-value: ( 'morning': $basic-value, 'evening': $private, ); Description You can add properties when documenting map variables. Map Properties 'morning': $basic-value (string) What to say in the morning when you get up 'evening': $private (string) What to say in the evening before bed requires $basic-value (*) We can require other variables, and explain why $private (*) [private] We can also override the link"},{"filename":"config_api-utilities.html","title":"_API Utilities","contents":"$_herman-plural-types (map) [private] scss $_herman-plural-types: ( 'color': 'colors', 'size': 'sizes', 'ratio': 'ratios', 'font': 'fonts', ); Description A map of data-types understood by herman, for correcting singular input so data is consistently stored with a plural access key. used by @mixin herman-add() @function _herman-encode() [private] Description Encode any Sass value as a JSON-ready string. Parameters $value: $herman (*) Data to be encoded for JSON exporting requires @function _herman-encode-list() [private] @function _herman-encode-map() [private] @function _herman-encode-number() [private] @function _herman-quote() [private] used by @mixin herman-export() @function _herman-encode-list() [private] @function _herman-encode-map() [private] @function _herman-encode-list() [private] Description Encode each item in a Sass list, and convert to a JSON-ready square-bracketed list. Parameters $list: (list) List to be encoded for JSON exporting requires @function _herman-encode() [private] used by @function _herman-encode() [private] @function _herman-encode-map() [private] Description Encode each key/value in a Sass map, and convert to a JSON-ready object. Parameters $map: (map) Map to be encoded for JSON exporting requires @function _herman-quote() [private] @function _herman-encode() [private] used by @function _herman-encode() [private] @function _herman-encode-number() [private] Description Encode a number for JSON, adding proof-quotes for length values. Parameters $number: (number) Number to be encoded for JSON exporting requires @function _herman-quote() [private] used by @function _herman-encode() [private] @function _herman-quote() [private] Description Convert any value to a double-quoted string. Parameters $value: (*) The value to inspect and quote. requires @function _herman-escape-quotes() [private] used by @function _herman-encode() [private] @function _herman-encode-map() [private] @function _herman-encode-number() [private] @function _herman-escape-quotes() [private] Description Return a string, with internal quotes escaped. Parameters $string: (string) The string to be manipulated used by @function _herman-quote() [private]"},{"filename":"config-colors.html","title":"_Colors","contents":"$brand-colors (map) scss $brand-colors: ( 'brand-orange': hsl(24, 100%, 39%), 'brand-blue': hsl(195, 85%, 35%), 'brand-pink': hsl(330, 85%, 48%), ); Description We use bright primary colors for the main brand, everything else is based on these colors. Map Properties '<color-name>': (Color | String | List) Each <color-name> key can be assigned a color or previously-defined key, followed by an optional map of adjustments (as defined in Accoutrement-Color). related Accoutrement Color [external] Color Preview brand-orange #c75000 hsl(24, 100%, 39%) brand-blue #0d7fa5 hsl(195, 85%, 35%) brand-pink #e2127a hsl(330, 85%, 48%) $neutral-colors scss $neutral-colors: ( 'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%), 'gray': 'brand-blue' ('desaturate': 80%), 'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%), ); Description Use these neutral colors to create structure and hierarchy in the document. related Accoutrement Color [external] Color Preview light-gray #dedede hsl(0, 0%, 87%) gray #555b5e hsl(200, 5%, 35%) black #3b4042 hsl(197, 6%, 25%) $status-colors scss $status-colors: ( 'go': hsl(75, 65%, 30%), 'yield': 'brand-orange', 'stop': hsl(0, 85%, 50%), ); Description These status colors for UI elements give a quick sense of progress, warning, or errors. related Accoutrement Color [external] Color Preview go #657e1b hsl(75, 65%, 30%) yield #c75000 hsl(24, 100%, 39%) stop #ec1313 hsl(0, 85%, 50%) $theme-colors scss $theme-colors: ( 'theme-dark': 'brand-blue', 'theme-light': 'brand-blue' ('tint': 80%), 'background': #fff, 'text': 'black', 'text-light': 'gray', 'border': 'gray', 'light-border': 'light-gray', 'callout': 'light-gray', 'overlay': 'callout' ('rgba': 0.9), 'shadow': 'gray' ('rgba': 0.5), 'action': 'brand-pink' ('shade': 25%), 'focus': 'brand-pink', 'active': 'action', 'underline': 'brand-blue' ('tint': 70%), 'slight': 'light-gray' ('tint': 90%), 'code': hsl(196, 23%, 45%), 'code-shadow': 'code' (rgba: 0.2), ); Description Applying the brand and accent colors to a sitewide theme. related Accoutrement Color [external] Color Preview theme-dark #0d7fa5 hsl(195, 85%, 35%) theme-light #cfe5ed hsl(196, 45%, 87%) background #ffffff hsl(0, 0%, 100%) text #3b4042 hsl(197, 6%, 25%) text-light, border #555b5e hsl(200, 5%, 35%) light-border, callout #dedede hsl(0, 0%, 87%) overlay #dedede hsla(0, 0%, 87%, 0.9) shadow #555b5e hsla(200, 5%, 35%, 0.5) action, active #aa0e5c hsl(330, 85%, 36%) focus #e2127a hsl(330, 85%, 48%) underline #b7d9e4 hsl(195, 45%, 81%) slight #fcfcfc hsl(0, 0%, 99%) code #587f8d hsl(196, 23%, 45%) code-shadow #587f8d hsla(196, 23%, 45%, 0.2) $system-colors scss $system-colors: ( 'contrast-light': 'background', 'contrast-dark': 'text', ); Description Colors used by accoutrement-color to calculate contrast ratios. related Accoutrement Color [external] Color Preview contrast-light #ffffff hsl(0, 0%, 100%) contrast-dark #3b4042 hsl(197, 6%, 25%)"},{"filename":"config-scale.html","title":"_Sizes","contents":"$text-ratios scss $text-ratios: ( 'herman': 1.4 ); Description A set of standard ratios for creating text rhythm and modular-scales. related Accoutrement Scale [external] Ratio Preview herman: 1.4 1 1.4 1.96 2.74 3.84 5.38 $text-sizes scss $text-sizes: ( 'root': 18px, 'large-rem': 20px ('convert-units': 'rem'), 'base-rem': 'root' ('convert-units': 'rem'), 'small-rem': 16px ('convert-units': 'rem'), 'xsmall-rem': 'base-rem' ('times': 0.75), 'large': calc(%s + %s) ('base-rem', 1vw), 'medium': calc(%s + %s) ('base-rem', 0.5vw), 'base': calc(%s + %s) ('small-rem', 0.5vw), 'small': calc(%s + %s) ('small-rem', 0.25vw), 'xsmall': calc(%s + %s) ('xsmall-rem', 0.25vw), 'code': 'xsmall', 'small-code': calc(%s + %s) ('base-rem' ('times': 0.675), 0.25vw), 'h1': calc(%s + %s) ('base-rem', 2.5vw), 'h2': calc(%s + %s) ('base-rem', 2vw), 'h3': 'large', 'quote': 'medium', ); Description A set of standard text sizes. related Accoutrement Scale [external] Size Previews root: 18px Pack my box with five dozen liquor jugs. large-rem: 1.11111rem Pack my box with five dozen liquor jugs. base-rem: 1rem Pack my box with five dozen liquor jugs. small-rem: 0.88889rem Pack my box with five dozen liquor jugs. xsmall-rem: 0.75rem Pack my box with five dozen liquor jugs. large: calc(1rem + 1vw) Pack my box with five dozen liquor jugs. medium: calc(1rem + .5vw) Pack my box with five dozen liquor jugs. base: calc(.88889rem + .5vw) Pack my box with five dozen liquor jugs. small: calc(.88889rem + .25vw) Pack my box with five dozen liquor jugs. xsmall: calc(.75rem + .25vw) Pack my box with five dozen liquor jugs. code: calc(.75rem + .25vw) Pack my box with five dozen liquor jugs. small-code: calc(.675rem + .25vw) Pack my box with five dozen liquor jugs. h1: calc(1rem + 2.5vw) Pack my box with five dozen liquor jugs. h2: calc(1rem + 2vw) Pack my box with five dozen liquor jugs. h3: calc(1rem + 1vw) Pack my box with five dozen liquor jugs. quote: calc(1rem + .5vw) Pack my box with five dozen liquor jugs. $spacing-sizes scss $spacing-sizes: ( 'rhythm': 'root' ('herman': 1, 'convert-units': 'rem'), 'gutter': 'rhythm', 'flex-gutter': calc(%s + %s) ('shim', 2.5vw), 'double-gutter': 'gutter' ('times': 2), 'spacer': 'gutter' ('times': 3), 'double-spacer': 'spacer' ('times': 2), 'shim': 'gutter' ('times': 0.5), 'half-shim': 'shim' ('times': 0.5), 'quarter-shim': 'shim' ('times': 0.25) ); Description A set of standard spacing sizes. related Accoutrement Scale [external] Size Previews rhythm: 1.4rem gutter: 1.4rem flex-gutter: calc(.7rem + 2.5vw) double-gutter: 2.8rem spacer: 4.2rem double-spacer: 8.4rem shim: 0.7rem half-shim: 0.35rem quarter-shim: 0.175rem $pattern-sizes scss $pattern-sizes: ( 'border': 8px, 'page': 50rem, 'nav-small': 21rem, 'nav-medium': 32rem, 'project-link-nav': 36rem, 'specimen': 'rhythm' ('times': 3), 'color-preview': calc(15em + 0.25vw), // trial and error… 'color-swatch': 'rhythm' ('times': 4), 'icon': 28px, 'nav-underline': 4px, 'footer-logo': 'rhythm' ('times': 2), ); Description A set of pattern-specific sizes, that can be applied to various components. related Accoutrement Scale [external] Size Previews border: 8px page: 50rem nav-small: 21rem nav-medium: 32rem project-link-nav: 36rem specimen: 4.2rem color-preview: calc(15em + 0.25vw) color-swatch: 5.6rem icon: 28px nav-underline: 4px footer-logo: 2.8rem"},{"filename":"config-fonts.html","title":"_Fonts","contents":"$font-formats scss $font-formats: 'woff' 'ttf'; Description The font-formats that we want to import related Accoutrement Type [external] $sans-font scss $sans-font: ( 'name': 'Source Sans Pro', 'source': 'https://fonts.google.com/specimen/Source+Sans+Pro', 'stack': ('Helvetica Neue', 'Helvetica', 'Arial', sans-serif), ); Description A clean sans-serif option used for smaller text like captions and labels. related Accoutrement Type [external] Font Preview Source Sans Pro (sans) font-family: 'Source Sans Pro', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif; $code-font scss $code-font: ( 'name': 'Source Code Pro', 'source': 'https://fonts.google.com/specimen/Source+Code+Pro', 'stack': ('Consolas', 'Menlo', 'Monaco', 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif), ); Description A readable monospace font for code previews. related Accoutrement Type [external] Font Preview Source Code Pro (code) font-family: 'Source Code Pro', 'Consolas', 'Menlo', 'Monaco', 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif;"},{"filename":"config-utils.html","title":"_Utilities","contents":"@mixin config() Description Internal utility for managing herman and accoutrement maps in one single mixin. In preparation for the Sass 3.5+ modular syntax, this can only be done in the project being documented. related Accoutrement-Color [external] Accoutrement-Type [external] Accoutrement-Scale [external] requires @mixin herman-add() $link scss $link: '&:link, &:visited'; Description Shortcut for link and visited pseudo-classes. Examples njk {% import 'utility.macros.j2' as utility %} {{ utility.link_if( content='stacy', url='#', attrs={'data-sassdoc': 'font-name'} ) }} html compiled <a href=\"#\" data-sassdoc=\"font-name\">stacy</a> scss target link and visited anchors a { #{$link} { color: blue; } } css compiled a:link, a:visited { color: blue; } related $focus To-do List Add a sample @todo $focus scss $focus: '&:hover, &:focus, &:active'; Description Shortcut for hover, focus, and active pseudo-classes. Example scss a { #{$focus} { color: red; } } css compiled a:hover, a:focus, a:active { color: red; } related $link"},{"filename":"config-z-index.html","title":"_Z-index","contents":"$z-index scss $z-index: 'bump', 'main', 'sidebar', 'banner', 'overlay', 'loader'; Description List of named z-index layers. The order they are defined will be the integer they are assigned. related Accoutrement Layout: Z-Index [external]"},{"filename":"style-typography.html","title":"_Typography","contents":".text-block scss .text-block { max-width: 75ch; h1, h2, h3, h4 { color: color('black'); } h1 { font-size: size('h2'); margin-bottom: size('gutter'); } h2, h3 { margin-top: size('gutter'); } h2 { font-size: size('h3'); margin-bottom: size('half-shim'); } p { margin: 0 0 size('shim'); } ol, ul { margin: 0 size('gutter') size('shim'); } li { > p { margin: size('half-shim') 0; } } blockquote { border-left: size('half-shim') solid color('light-border'); font-size: size('quote'); padding-left: size('shim') + size('half-shim'); > :first-child { text-indent: -0.4em; } > :nth-last-child(2) { margin-bottom: size('shim'); } > :last-child { margin-top: size('shim'); } cite { display: block; font-size: size('small'); } } } Description Style a block of rendered html-text, with line-length and typographic styles."},{"filename":"style-icons.html","title":"_Icons","contents":"[data-icon-size='icon-small'] scss [data-icon-size='icon-small'] { @include square('icon'); } Description A data attribute for setting an icon. Example njk {% import 'utility.macros.j2' as utility %} {{ utility.icon('menu', size='icon-small') }} html compiled <svg data-icon=\"menu\" data-icon-size=\"icon-small\"> <use xlink:href=\"#icon-menu\" /> </svg> Icon Previews: assets/svg/"},{"filename":"api_json-export.html","title":"Exporting Styles to JSON","contents":"Exporting Styles to JSON While many UX patterns will be rendered as HTML components, there are several abstract style patterns – like color-palettes and font-specimens – that never appear as components in the application. Herman provides several @preview annotations to help visualize these abstract patterns – but that requires passing the data from your styles to Herman’s templates. We do that using Sass maps (key:value object variables) and the herman-export mixin to generate JSON out of Sass variables. Example scss @include herman-export; css compiled /*! json-encode: {\"colors\": {\"brand-colors\": {\"brand-orange\": \"#c75000\", \"brand-blue\": \"#0d7fa5\", \"brand-pink\": \"#e2127a\"}, \"neutral-colors\": {\"light-gray\": \"#dedede\", \"gray\": \"#555b5e\", \"black\": \"#3b4042\"}, \"status-colors\": {\"go\": \"#657e1b\", \"yield\": \"#c75000\", \"stop\": \"#ec1313\"}, \"theme-colors\": {\"theme-dark\": \"#0d7fa5\", \"theme-light\": \"#cfe5ed\", \"background\": \"#fff\", \"text\": \"#3b4042\", \"text-light\": \"#555b5e\", \"border\": \"#555b5e\", \"light-border\": \"#dedede\", \"callout\": \"#dedede\", \"overlay\": \"rgba(222, 222, 222, 0.9)\", \"shadow\": \"rgba(85, 91, 94, 0.5)\", \"action\": \"#aa0e5c\", \"focus\": \"#e2127a\", \"active\": \"#aa0e5c\", \"underline\": \"#b7d9e4\", \"slight\": \"#fcfcfc\", \"code\": \"#587f8d\", \"code-shadow\": \"rgba(88, 127, 141, 0.2)\"}, \"system-colors\": {\"contrast-light\": \"#fff\", \"contrast-dark\": \"#3b4042\"}}, \"ratios\": {\"text-ratios\": {\"herman\": 1.4}}, \"sizes\": {\"text-sizes\": {\"root\": \"18px\", \"large-rem\": \"1.11111rem\", \"base-rem\": \"1rem\", \"small-rem\": \"0.88889rem\", \"xsmall-rem\": \"0.75rem\", \"large\": \"calc(1rem + 1vw)\", \"medium\": \"calc(1rem + 0.5vw)\", \"base\": \"calc(0.88889rem + 0.5vw)\", \"small\": \"calc(0.88889rem + 0.25vw)\", \"xsmall\": \"calc(0.75rem + 0.25vw)\", \"code\": \"calc(0.75rem + 0.25vw)\", \"small-code\": \"calc(0.675rem + 0.25vw)\", \"h1\": \"calc(1rem + 2.5vw)\", \"h2\": \"calc(1rem + 2vw)\", \"h3\": \"calc(1rem + 1vw)\", \"quote\": \"calc(1rem + 0.5vw)\"}, \"spacing-sizes\": {\"rhythm\": \"1.4rem\", \"gutter\": \"1.4rem\", \"flex-gutter\": \"calc(0.7rem + 2.5vw)\", \"double-gutter\": \"2.8rem\", \"spacer\": \"4.2rem\", \"double-spacer\": \"8.4rem\", \"shim\": \"0.7rem\", \"half-shim\": \"0.35rem\", \"quarter-shim\": \"0.175rem\"}, \"pattern-sizes\": {\"border\": \"8px\", \"page\": \"50rem\", \"nav-small\": \"21rem\", \"nav-medium\": \"32rem\", \"project-link-nav\": \"36rem\", \"specimen\": \"4.2rem\", \"color-preview\": \"calc(15em + 0.25vw)\", \"color-swatch\": \"5.6rem\", \"icon\": \"28px\", \"nav-underline\": \"4px\", \"footer-logo\": \"2.8rem\"}}, \"fonts\": {\"sans\": {\"name\": \"Source Sans Pro\", \"source\": \"https://fonts.google.com/specimen/Source+Sans+Pro\", \"stack\": [\"Helvetica Neue\", \"Helvetica\", \"Arial\", \"sans-serif\"]}, \"code\": {\"name\": \"Source Code Pro\", \"source\": \"https://fonts.google.com/specimen/Source+Code+Pro\", \"stack\": [\"Consolas\", \"Menlo\", \"Monaco\", \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", \"monospace\", \"sans-serif\"]}}} */ related @mixin herman-export() $herman scss $herman: () !default; Description Use this map to collect and organize color, font, size, and ratio values to be exported for Herman. The $herman map should be structured with top-level keys representing individual sassdoc items. Top-level values will often be a nested map of the data to preview. Use the herman-add or accoutrement-add mixins to automatically populate fonts, colors, sizes, and ratios from existing maps – or construct your $herman map by hand, following these guidelines… Map structure Each type of preview value should be nested inside a map that describes what type of data is being stored: $herman: ( 'colors': ( /* color maps */ ); 'sizes': ( /* color maps */ ); 'ratios': ( /* color maps */ ); 'fonts': ( /* color maps */ ); ); Colors Each color has an access name and value. For us, that is often a map-key string, and Sass hex/rgba output color: 'brand-colors': ( 'brand-orange': '#c75000', 'brand-blue': '#0d7fa5', ) If you are storing colors in variables, you may want to use name keys like $brand-orange to represent the proper use of a color. Color values can be in any valid web-color format – hex, hsl/a, rgba/a, etc – converted to a valid JSON string. Sizes & Ratios Size and ratio data is similar to colors, organized into top-level groups that may contain one or more size/ratio key:value pairs: 'font-ratios': ( 'line-height': '1.4', 'minor-seventh': '16/9', ), 'text-sizes': ( 'root': '18px', 'large': 'calc(1rem + 1.5vw)', ) Ratio values can be in any valid number, and size values should be valid CSS lengths – both converted to a valid JSON string. Fonts Each font should have a top-level key of its own, since font-previews display a single font at a time. The data map accepts: name: how the font should be referenced in CSS (if omitted, defaults to top-level key) stack: optional string or list of font-stack fallbacks source: link to more information on the font, or typekit/googlefonts as useful svgid: optional suffix value for local SVG font src, e.g. font-file.svg#svgid (if omitted, defaults to name) <variant>: describe any number of relative paths to locally-hosted font-files per variant: e.g. regular, bold italic, etc. 'body-font': ( 'name': 'Source Sans Pro', 'source': 'https://github.com/adobe-fonts/source-sans-pro' 'stack': ('Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif'), 'regular': 'sans/sourcesanspro-regular-webfont', 'italic': 'sans/sourcesanspro-italic-webfont', ) Example scss sample map structure $herman: ( 'colors': ( 'brand-colors': ( 'brand-orange': '#c75000', 'brand-blue': '#0d7fa5', ), 'status-colors': ( 'go': '#657e1b', 'yield': '#c75000', ), ), 'fonts': ( 'body-font': ( 'name': 'Source Sans Pro', 'stack': ('Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif'), 'regular': 'sans/sourcesanspro-regular-webfont', 'italic': 'sans/sourcesanspro-italic-webfont', ), ), 'sizes': ( 'text-sizes': ( 'root': '18px', 'large': 'calc(1rem + 1.5vw)', ), ), ); used by @mixin herman-add() @mixin herman-export() Description Encode a Sass map as a JSON-ready string, and print to CSS output as a persistent comment. Parameters $map: $herman (map) Map to be encoded for JSON exporting Example scss // Export to JSON @include herman-export; css compiled /*! json-encode: {\"colors\": {\"brand-colors\": {\"brand-orange\": \"#c75000\", \"brand-blue\": \"#0d7fa5\", \"brand-pink\": \"#e2127a\"}, \"neutral-colors\": {\"light-gray\": \"#dedede\", \"gray\": \"#555b5e\", \"black\": \"#3b4042\"}, \"status-colors\": {\"go\": \"#657e1b\", \"yield\": \"#c75000\", \"stop\": \"#ec1313\"}, \"theme-colors\": {\"theme-dark\": \"#0d7fa5\", \"theme-light\": \"#cfe5ed\", \"background\": \"#fff\", \"text\": \"#3b4042\", \"text-light\": \"#555b5e\", \"border\": \"#555b5e\", \"light-border\": \"#dedede\", \"callout\": \"#dedede\", \"overlay\": \"rgba(222, 222, 222, 0.9)\", \"shadow\": \"rgba(85, 91, 94, 0.5)\", \"action\": \"#aa0e5c\", \"focus\": \"#e2127a\", \"active\": \"#aa0e5c\", \"underline\": \"#b7d9e4\", \"slight\": \"#fcfcfc\", \"code\": \"#587f8d\", \"code-shadow\": \"rgba(88, 127, 141, 0.2)\"}, \"system-colors\": {\"contrast-light\": \"#fff\", \"contrast-dark\": \"#3b4042\"}}, \"ratios\": {\"text-ratios\": {\"herman\": 1.4}}, \"sizes\": {\"text-sizes\": {\"root\": \"18px\", \"large-rem\": \"1.11111rem\", \"base-rem\": \"1rem\", \"small-rem\": \"0.88889rem\", \"xsmall-rem\": \"0.75rem\", \"large\": \"calc(1rem + 1vw)\", \"medium\": \"calc(1rem + 0.5vw)\", \"base\": \"calc(0.88889rem + 0.5vw)\", \"small\": \"calc(0.88889rem + 0.25vw)\", \"xsmall\": \"calc(0.75rem + 0.25vw)\", \"code\": \"calc(0.75rem + 0.25vw)\", \"small-code\": \"calc(0.675rem + 0.25vw)\", \"h1\": \"calc(1rem + 2.5vw)\", \"h2\": \"calc(1rem + 2vw)\", \"h3\": \"calc(1rem + 1vw)\", \"quote\": \"calc(1rem + 0.5vw)\"}, \"spacing-sizes\": {\"rhythm\": \"1.4rem\", \"gutter\": \"1.4rem\", \"flex-gutter\": \"calc(0.7rem + 2.5vw)\", \"double-gutter\": \"2.8rem\", \"spacer\": \"4.2rem\", \"double-spacer\": \"8.4rem\", \"shim\": \"0.7rem\", \"half-shim\": \"0.35rem\", \"quarter-shim\": \"0.175rem\"}, \"pattern-sizes\": {\"border\": \"8px\", \"page\": \"50rem\", \"nav-small\": \"21rem\", \"nav-medium\": \"32rem\", \"project-link-nav\": \"36rem\", \"specimen\": \"4.2rem\", \"color-preview\": \"calc(15em + 0.25vw)\", \"color-swatch\": \"5.6rem\", \"icon\": \"28px\", \"nav-underline\": \"4px\", \"footer-logo\": \"2.8rem\"}}, \"fonts\": {\"sans\": {\"name\": \"Source Sans Pro\", \"source\": \"https://fonts.google.com/specimen/Source+Sans+Pro\", \"stack\": [\"Helvetica Neue\", \"Helvetica\", \"Arial\", \"sans-serif\"]}, \"code\": {\"name\": \"Source Code Pro\", \"source\": \"https://fonts.google.com/specimen/Source+Code+Pro\", \"stack\": [\"Consolas\", \"Menlo\", \"Monaco\", \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", \"monospace\", \"sans-serif\"]}}} */ requires @function _herman-encode() [private] @mixin herman-add() Description Add a map of colors, fonts, sizes, ratios, etc to the $herman map for JSON-export, converting values to JSON-ready strings, with optional functions/args for compiling raw values. Parameters & Output $type: (String) The type of map being added, e.g. colors, fonts, sizes, or ratios. $key: (String) A key name for accessing this data in JSON – should match the variable name, unless key is otherwise set in the @preview annotation $map: (Map) A map of name/value pairs $args…: (Arglist) A function to use for compiling values before export, and any additional arguments for the function {CSS output} (code block) Updated $herman map, ready for JSON export Example scss $brand-colors: ( 'brand-blue': hsl(195, 85%, 35%), 'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%), ); @include herman-add('colors', 'brand-colors', $brand-colors, 'color'); /* #{$herman} */ css compiled /* (\"colors\": (\"brand-colors\": (\"brand-blue\": #0d7fa5, \"light-gray\": #dedede), \"neutral-colors\": (\"light-gray\": #dedede, \"gray\": #555b5e, \"black\": #3b4042), \"status-colors\": (\"go\": #657e1b, \"yield\": #c75000, \"stop\": #ec1313), \"theme-colors\": (\"theme-dark\": #0d7fa5, \"theme-light\": #cfe5ed, \"background\": #fff, \"text\": #3b4042, \"text-light\": #555b5e, \"border\": #555b5e, \"light-border\": #dedede, \"callout\": #dedede, \"overlay\": rgba(222, 222, 222, 0.9), \"shadow\": rgba(85, 91, 94, 0.5), \"action\": #aa0e5c, \"focus\": #e2127a, \"active\": #aa0e5c, \"underline\": #b7d9e4, \"slight\": #fcfcfc, \"code\": #587f8d, \"code-shadow\": rgba(88, 127, 141, 0.2)), \"system-colors\": (\"contrast-light\": #fff, \"contrast-dark\": #3b4042)), \"ratios\": (\"text-ratios\": (\"herman\": 1.4)), \"sizes\": (\"text-sizes\": (\"root\": 18px, \"large-rem\": 1.11111rem, \"base-rem\": 1rem, \"small-rem\": 0.88889rem, \"xsmall-rem\": 0.75rem, \"large\": calc(1rem + 1vw), \"medium\": calc(1rem + 0.5vw), \"base\": calc(0.88889rem + 0.5vw), \"small\": calc(0.88889rem + 0.25vw), \"xsmall\": calc(0.75rem + 0.25vw), \"code\": calc(0.75rem + 0.25vw), \"small-code\": calc(0.675rem + 0.25vw), \"h1\": calc(1rem + 2.5vw), \"h2\": calc(1rem + 2vw), \"h3\": calc(1rem + 1vw), \"quote\": calc(1rem + 0.5vw)), \"spacing-sizes\": (\"rhythm\": 1.4rem, \"gutter\": 1.4rem, \"flex-gutter\": calc(0.7rem + 2.5vw), \"double-gutter\": 2.8rem, \"spacer\": 4.2rem, \"double-spacer\": 8.4rem, \"shim\": 0.7rem, \"half-shim\": 0.35rem, \"quarter-shim\": 0.175rem), \"pattern-sizes\": (\"border\": 8px, \"page\": 50rem, \"nav-small\": 21rem, \"nav-medium\": 32rem, \"project-link-nav\": 36rem, \"specimen\": 4.2rem, \"color-preview\": calc(15em + 0.25vw), \"color-swatch\": 5.6rem, \"icon\": 28px, \"nav-underline\": 4px, \"footer-logo\": 2.8rem)), \"fonts\": (\"sans\": (\"name\": \"Source Sans Pro\", \"source\": \"https://fonts.google.com/specimen/Source+Sans+Pro\", \"stack\": \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif), \"code\": (\"name\": \"Source Code Pro\", \"source\": \"https://fonts.google.com/specimen/Source+Code+Pro\", \"stack\": \"Consolas\", \"Menlo\", \"Monaco\", \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", monospace, sans-serif))) */ requires @function herman-map-compile() $_herman-plural-types (map) [private] $herman used by @mixin config() @function herman-map-compile() Description Pass the values of any map through a given function (with optional arguments) and return the compiled map. This is used by herman-add and accoutrement-add, but can also be accessed directly. Parameters & Return $map: (Map) A sass map with values that need to be compiled, such as Accoutrement Colors or Sizes with adjustments $function: (String | Function) The function (or function name) to use in compiling values, such as Accoutrement color and size functions $args…: (Arglist) Pass in any additional arguments for the function @return (String | Any) An updated map, with values compiled by a third-party function, and converted to json-ready strings Example scss $brand-colors: ( 'brand-orange': hsl(24, 100%, 39%), 'brand-blue': hsl(195, 85%, 35%), 'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%), ); /* #{herman-map-compile($brand-colors, 'color')} */ css compiled /* (\"brand-orange\": #c75000, \"brand-blue\": #0d7fa5, \"light-gray\": #dedede) */ used by @mixin herman-add()"},{"filename":"style-nav.html","title":"_Navigation","contents":"[data-sassdoc-nav] scss [data-sassdoc-nav] { #{$link} { color: color('background'); line-height: 1.1; padding-bottom: size('quarter-shim'); position: relative; text-decoration: none; transition: color 0.4s; // Animated underlines @include before('') { @include position(null null 0 0); background: color('theme-light'); height: size('nav-underline'); transform: scale3d(0, 1, 1); transform-origin: center left; transition: transform 0.4s cubic-bezier(0.22, 0.61, 0.36, 1); transition-delay: 0.2s; width: 100%; } } #{$focus} { @include before('') { transform: scale3d(1, 1, 1); transition-delay: 0s; } } &[data-sassdoc-nav='is-active'] { #{$link}, #{$focus} { @include before('') { transform: scale3d(1, 1, 1); transition-delay: 0s; } } } } Description Navigation items, with inactive and active states. Example html <ul data-nav-menu> <li data-sassdoc=\"nav-item\"> <a href=\"#\" data-sassdoc-nav=\"is-not-active\">not active</a> </li> <li data-sassdoc=\"nav-item\"> <a href=\"#\" data-sassdoc-nav=\"is-active\">active</a> </li> </ul>"},{"filename":"style-code.html","title":"_Code Blocks","contents":"$hljs-colors (map) [private] scss $hljs-colors: ( 'hljs-background': 'slight', 'hljs-text': 'code', 'hljs-comment': #93a1a1, 'hljs-green': #859900, 'hljs-cyan': #2aa198, 'hljs-blue': #268bd2, 'hljs-yellow': #b58900, 'hljs-orange': #cb4b16, 'hljs-red': #dc322f, 'hljs-formula': #eee8d5, 'hljs-shadow': 'code-shadow', ); Description A map of colors for code-highlighting @function hljs-gradient() [private] Description Creates a faux-background gradient to overlay the edges of a code-block, so code-overflow is more obvious. Parameters & Return $direction: (string) Any valid gradient direction, e.g. to top $small: false (string) Use a smaller gradient for vertical/left overflow @return (background-image) A linear-gradient with the appropriate color-stops related Code Blocks used by Code Blocks [private] Code Blocks [private] scss [data-sassdoc='hljs'], .text-block pre { align-items: stretch; background-color: color('hljs-background'); color: color('hljs-text'); display: flex; position: relative; code { flex: 0 0 100%; overflow-x: auto; padding: size('shim'); padding-right: size('gutter'); } @include before(' ') { @include position(0); background: hljs-gradient('to top', 'small'), hljs-gradient('to right', 'small'), hljs-gradient('to bottom', 'small'), hljs-gradient('to left') no-repeat scroll; box-shadow: 0 0 size('half-shim') color('hljs-shadow') inset; pointer-events: none; } } requires @function hljs-gradient() [private]"},{"filename":"style-sections.html","title":"_Sections","contents":"@mixin section-arrow() Description Apply a top-border with centered down-arrow triangle, for use as a section-divider. Parameters $color: 'theme-dark' (color | string) The color of the border/arrow line $background: 'background' (color | string) The background color above the border/arrow, used to make it an arrow-outline rather than a solid triangle Examples scss [data-styleguide='section-arrow'] { @include section-arrow; } css compiled [data-styleguide='section-arrow'] { border-bottom: 8px solid #0d7fa5; display: block; position: relative; width: 100%; } [data-styleguide='section-arrow']::before, [data-styleguide='section-arrow']::after { content: \" \"; border: 0.7rem solid transparent; border-top-color: #0d7fa5; border-width: 0.7rem 1.4rem 0; left: 50%; position: absolute; top: 100%; transition: border-width 200ms; } [data-styleguide='section-arrow']::before { content: \" \"; margin-top: 8px; transform: translateX(-50%) translateY(-2px); } [data-styleguide='section-arrow']::after { content: \" \"; border-top-color: #fff; transform: translateX(-50%) translateY(-4px); } html <header data-sassdoc-region=\"banner\"></header>"},{"filename":"demo_colors.html","title":"Color Palettes","contents":"Documenting colors and rendering palettes Whether you store colors as individual variables or group them into a map, you can use Herman to document and display color palettes. In the end, Herman will need a map converted to JSON – but we’ll start with individual colors, and build the export from there. For this demo, we’ve defined two brand colors: $brand-blue: hsl(195, 85%, 35%); $brand-pink: hsl(330, 85%, 48%); $demo-colors scss $demo-colors: ( 'brand-blue': $brand-blue, 'brand-pink': $brand-pink, ); Description Preview color maps as palettes In order to export our colors to Herman, we’ll want to combine them into a map of name/value pairs. Sass does not provide any shortcuts for automating this step, or removing the duplication. Create as many maps as you like to organize different palettes – primary, secondary, button-colors, etc. Each map will be displayed individually, using the @preview color-palette annotation: // @preview color-palette The color-palette preview accepts an optional key argument, which defaults to the map-variable name. That key will be used to access the data from JSON, so it doesn’t matter what key is used, as long as the key given here matches the group-name used when adding this data to $herman. // @preview color-palette; key: my-colors By default, our color palettes display name, hex, rgb(a), and hsl(a) for every color. You can change what color values are shown in the SassDoc/Herman configuration using the herman.displayColors option: herman: displayColors: - hex - hsl Color Preview brand-blue #0d7fa5 hsl(195, 85%, 35%) brand-pink #e2127a hsl(330, 85%, 48%) Add color-data to $herman In order to preview the $demo-colors palette, we need to export the data to JSON. That’s a two-step process: first building the export-map, and then creating a sass file to do the actual export. We provide shortcuts to help with both. Use the herman-add mixin to add individual data maps to the global export map. @include herman-add('colors', 'demo-colors', $demo-colors); The first argument tells Herman what type of data is being added – in this case colors. Herman will organize the output JSON into subgroups by type. We use this to our advantage, passing the exported colors to application-js as well as Herman, so colors defined in Sass can be accessed in JavaScript. The second argument sets a key name for accessing this particular group of colors. The herman-add key should match the key provided to @preview color-palette. The third argument provides the actual map of data to be added to the $herman export map. The result is an export map that looks like this: $herman: ( 'colors': ( 'demo-colors': ( 'brand-blue': hsl(195, 85%, 35%), 'brand-pink': hsl(330, 85%, 48%), ), ), ); You can also build that map by hand, if you prefer. See the color map documentation for details » related $herman @mixin herman-add() Compile and export complex maps At OddBird, we store our colors in more complex maps, where the values need to be parsed and compiled before they can be exported to Herman. Using accoutrement-color, our maps look like this: $demo-noncolors: ( 'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%), 'gray': 'brand-blue' ('desaturate': 80%), 'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%), ); Our color() function knows how to interpret that syntax and compile actual colors based on our map notation. In order to export real color data to Herman, we want to run every value in our map through the color function before exporting. herman-add accepts a final variable-length argument for calling a function on each value of the map. Pass in a function name (Sass 3.4-), or first-class function (Sass 3.5+) along with any additional arguments that function might need: $color-function: get-function('color'); @include herman-add('colors', demo-noncolors, $demo-noncolors, $color-function, $args…); The color function will be called on each value before adding it to our $herman map. The call happens in this format: 'color-name': color($value, $args…), related Accoutrement-Color [external] Color Preview light-gray #dedede hsl(0, 0%, 87%) gray #555b5e hsl(200, 5%, 35%) black #3b4042 hsl(197, 6%, 25%)"},{"filename":"demo_fonts.html","title":"Font Specimens","contents":"Documenting fonts & displaying specimens Whether you use a webfont CDN like Typkit and Google Fonts, or locally-hosted font files, Herman can document and display your font-specimens. In the end, Herman will need a map converted to JSON – but we’ll start with individual font families, one hosted on a CDN, and the other hosted locally. Then we can build the export from there. Each font family will be displayed individually, using the @font annotation: // @font 'my-font' (regular, bold) Let’s look at a few examples… $demo-cdn scss $demo-cdn: ( 'name': 'Source Code Pro', 'source': 'https://fonts.google.com/specimen/Source+Code+Pro', 'stack': ('Consolas', 'Menlo', 'Courier New', monospace, sans-serif), ); Description Displaying CDN-hosted webfonts For remotely-hosted fonts, the @font annotation accepts three arguments: The first argument (in single-quotes or double-quotes) is the key that will be used to access the data from JSON, so it doesn’t matter what key is used – as long as the key given here matches the group-name used when adding this data to $herman. The second argument (in parentheses) is an optional list of font variants to display in the preview. If omitted, it defaults to any variants included as keys in the font map itself. The third argument (on the following line, nested with two spaces) is an optional html string – usually a <link> or <script> tag required to use the webfont. This code will be inserted into the rendered iframe <head> for this font preview and all Herman examples, making your webfont available to other components. We’ve stored this data in a map, with the syntax used by both Herman (for JSON exporting) and our Accoutrement-Type toolkit. Example scss // @font 'demo-cdn' (regular, bold, bold italic) // <link href=\"https://fonts.googleapis.com/css?family=Source+Code+Pro:400,700\" rel=\"stylesheet\"> Font Preview Source Code Pro (demo-cdn) font-family: 'Source Code Pro', 'Consolas', 'Menlo', 'Courier New', monospace, sans-serif; $demo-local scss $demo-local: ( 'name': 'rockingham', 'regular': 'rockingham/rockingham-regular-webfont', 'bold': 'rockingham/rockingham-bold-webfont', 'italic': 'rockingham/rockingham-italic-webfont', 'bold' 'italic': 'rockingham/rockingham-bolditalic-webfont', 'stack': 'fantasy', ); Description Displaying local fonts For locally-hosted fonts, the @font annotation accepts three arguments: The first argument (in single-quotes or double-quotes) is the key that will be used to access the data from JSON, so it doesn’t matter what key is used – as long as the key given here matches the group-name used when adding this data to $herman. The second argument (in curly-brackets {...}) is a required list of font file formats to include. Valid format options are ttf, otf, woff, woff2, svg, svgz, and eot. These will be loaded in the order given, with special-casing for eot files. The third argument (in parentheses) is an optional list of font variants to display in the preview. If omitted, it defaults to all variants included as keys in the font map itself. // @font 'demo-local' {woff2, woff, ttf} In order for this to work, you must specify a fontpath (the path where Herman will look to import local font files), in your SassDoc herman configuration object. # .sassdocrc (yaml) herman: fontpath: 'fonts/' Font Preview rockingham (demo-local) font-family: 'rockingham', fantasy; Add font data to $herman In order to preview the $demo-cdn and $demo-local maps, we also need to export the data to JSON. You can add data to the $herman export-map by hand, or use the provided herman-add mixin to combine existing maps into the proper structure. See the font map documentation for details. @include herman-add('font', 'demo-code', $demo-code); @include herman-add('font', 'demo-local', $demo-local); After adding your data to the $herman map, it can be converted to JSON using herman-export. related Accoutrement-Type [external] $herman @mixin herman-add() @mixin herman-export()"}]