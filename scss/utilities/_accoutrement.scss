// Accoutrement Utilities
// ======================


/// ## Accoutrement Integration
///
/// OddBird provides several project-configuration tools
/// to help manage abstract style patterns
/// (fonts, colors, sizes, ratios)
/// in a way that is both human and machine readable –
/// allowing simpler automation and documentation
/// along with clear code organization
/// and explicit patterns.
///
/// Herman provides json-export shortcuts for:
/// - [Accoutrement-Color][color] (for color palettes)
/// - [Accoutrement-Type][type] (for font-specimens)
/// - [Accoutrement-Scale][scale] (for ratios and sizes)
///
/// [color]: http://oddbird.net/accoutrement-color/
/// [type]: http://oddbird.net/accoutrement-type/
/// [scale]: http://oddbird.net/accoutrement-scale/
///
/// @group api_sass-accoutrement


// Accoutrement Add
// ----------------
/// Add [Accoutrement](http://oddbird.net/open-source/accoutrement/)
/// map-partials to both the Herman export map and
/// the appropriate global Accoutrement map variable –
/// e.g. colors are added to both `$herman` (compiled)
/// and `$colors` (raw).
///
/// @group api_sass-accoutrement
///
/// @param {String} $type -
///   The type of map being added,
///   e.g. `colors`, `fonts`,
///   `sizes`, or `ratios`.
/// @param {String} $key -
///   A key name for accessing this data in JSON —
///   should match the variable name,
///   unless otherwise set in the `@preview` annotation
/// @param {Map} $map -
///   A map of name/value pairs,
///   based on the Accoutrement syntax
/// @output
///   Updated `$herman` map, ready for JSON export
/// @example scss
///   $brand-colors: (
///     'brand-blue': hsl(195, 85%, 35%),
///     'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
///   );
///
///   @include accoutrement-add('color', 'brand-colors', $brand-colors);
///
///   /* Herman: */
///   /* #{$herman} */
///   /* --- */
///   /* Accoutrement-Colors: */
///   /* #{$colors} */
@mixin accoutrement-add(
  $type,
  $key,
  $map
) {
  // pluralize type
  $type: map-get($_herman-plural-types, $type) or $type;

  // find the proper accoutrement function
  $call: map-get($_herman-accoutrement-per-type, $type);

  // get-function, as needed
  $get: function-exists('get-function');
  $call: if($get and $call, get-function($call), $call);

  // merge into accoutrement-maps
  @if ($type == 'colors') {
    $colors: map-merge($colors, $map) !global;
  } @else if ($type == 'sizes') {
    $sizes: map-merge($sizes, $map) !global;
  } @else if ($type == 'ratios') {
    $ratios: map-merge($ratios, $map) !global;
  } @else if ($type == 'fonts') {
    $fonts: map-merge($fonts, ($key: $map)) !global;
  }

  // send proper arguments to herman-add
  $args: ($type, $key, $map);
  $args: if($call, append($args, $call), $args);
  @include herman-add($args...);
}
