// Json Encoding
// =============


// JSON Ecode
// ----------
/// Encode a Sass map as a JSON-ready string.
///
/// @group api_json-export
///
/// @param {map} $map [$herman] -
///   Map to be encoded for JSON exporting
@function json-encode($value) {
  $type: type-of($value);

  @if ($type == 'list') {

    // Lists
    $str: '';

    @each $item in $value {
      $str: if(length($str) > 0, $str + ', ', $str);
      $str: $str + json-encode($item);
    }

    $value: '[#{$str}]';

  } @else if ($type == 'map') {

    // Maps
    $str: '';

    @each $key, $value in $map {
      $str: if(length($str) > 0, $str + ', ', $str);
      $str: $str + _herman-quote($key) + ': ' + json-encode($value);
    }

    $value: '{#{$str}}';

  } @else if ($type == 'number') {

    // Numbers
    $value: if(unitless($value), inspect($value), _herman-quote($value));

  } @else {

    // Catch-All
    $value: _herman-quote($value);

  }

  @return $value;
}


// Quote
// -----
/// Convert any value to a double-quoted string.
///
/// @group z_api-utilities
/// @access private
///
/// @param {*} $value -
///   The value to inspect and quote.
@function _herman-quote(
  $value
) {
  $value: inspect($value);
  $value: _herman-escape-quotes($value);
  @return '"#{$value}"';
}


// Escape Quotes
// -------------
/// Return a string, with internal quotes replaced
///
/// @group z_api-utilities
/// @access private
///
/// @param {string} $string -
///   The string to be manipulated
/// @return {string} -
///   The original string,
///   with internal quotes escaped
@function _herman-escape-quotes(
  $string
) {
  $return: $string;
  $old: '"';
  $new: '\\"';
  $i: str-index($string, $old);
  $n: str-length($old);

  @if $string == $old {
    $return: $new;
  } @else if $i {
    $a: if($i > 1, str-slice($string, 1, $i - 1), '');
    $z: str-slice($string, $i + $n);
    $z: _herman-escape-quotes($z);

    $return: $a + if($new, $new, '') + $z;
  }

  @return $return;
}
