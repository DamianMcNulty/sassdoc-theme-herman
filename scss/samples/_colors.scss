// Color Samples
// =============


/// ## Documenting colors and rendering palettes
///
/// Whether you store colors as individual variables,
/// or group them into a map,
/// you can use Herman to document and display color palettes.
/// In the end, Herman will need a map
/// converted to JSON –
/// but we'll start with individual colors,
/// and build the export from there.
///
/// For this demo, we've defined two brand colors:
///
/// ```
/// $brand-blue: hsl(195, 85%, 35%);
/// $brand-pink: hsl(330, 85%, 48%);
/// ```
///
/// @group demo_colors


$brand-blue: hsl(195, 85%, 35%);
$brand-pink: hsl(330, 85%, 48%);


/// ## Preview color maps as palettes
///
/// In order to export our colors to Herman,
/// we'll want to combine them into a map
/// of name/value pairs.
/// Sass does not provide any shortcuts for automating this step,
/// or remving the duplication.
///
/// Create as many maps as you like,
/// to organize different palettes –
/// primary, secondary, button-colors, etc.
/// Each map will be displayed individually,
/// using the `@preview color-palette` annotation:
///
/// ```
/// /// @preview color-palette
/// ```
///
/// The color-palette preview accepts an optional `key` argument,
/// which defaults to the map-variable name.
/// That key will be used to acccess the data from JSON,
/// so it doesn't matter what key is used,
/// as long as the key given here matches the group-name
/// used when adding this data to `$herman`.
///
/// ```
/// /// @preview color-palette; key: my-colors
/// ```
///
/// By default, our color palettes display
/// `name`, `hex`, `rgb(a)`, and `hsl(a)` for every color.
/// You can change what color values are shown
/// in the SassDoc/Herman configuration
/// using the `herman.displayColors` option:
///
/// ```
/// displayColors: ['hex', 'hsl']
/// ```
///
/// @preview color-palette
/// @group demo_colors
$demo-colors: (
  'brand-blue': $brand-blue,
  'brand-pink': $brand-pink,
);


/// ## Add color-data to $herman
///
/// In order to preview the `$demo-colors` palette,
/// we need to export the data to JSON.
/// That's a two-step process:
/// first building the export-map,
/// and then creating a sass file to do the actual export.
/// We provide shortcuts to help with both.
///
/// Use the `herman-add` mixin to add individual data maps
/// to the global export map.
///
/// ```
///  @include herman-add('colors', 'demo-colors', $demo-colors);
/// ```
///
/// - The first argument tells Herman what type of data is being added –
///   in this case `colors`.
///   Herman will organize the output JSON into subgroups by type.
///   We use this to our advantage,
///   passing the exported colors to application-js as well as Herman,
///   so colors defined in Sass can be accessed in javascript.
/// - The second argument sets a `key` name
///   for accessing this particular group of colors.
///   The `herman-add` key should match
///   the key provided to `@preview color-palette` earlier.
/// - The third argument provides the actual map of data
///   to be added to the `$herman` export map.
///
/// The result is an export map that looks like this:
///
/// ```
/// $herman: (
///   'colors': (
///     'demo-colors': (
///       'brand-blue': hsl(195, 85%, 35%),
///       'brand-pink': hsl(330, 85%, 48%),
///     ),
///   ),
/// );
/// ```
///
/// You can also build that map by hand, if you prefer.
///
/// @see $herman
/// @see herman-add
/// @group demo_colors
@include herman-add('colors', 'demo-colors', $demo-colors);


$demo-noncolors: (
  'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
  'gray': 'brand-blue' ('desaturate': 80%),
  'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%),
);


/// ## Compile and export complex maps
///
/// At OddBird, we store our colors in more complex maps,
/// where the values need to be parsed and compiled
/// before they can be exported to Herman.
/// Using [accoutrement-color][ac], our maps look like this:
///
/// [ac]: http://oddbird.net/accoutrement-color
///
/// ```
/// $demo-noncolors: (
///   'light-gray': 'brand-blue' ('tint': 80%, 'desaturate': 80%),
///   'gray': 'brand-blue' ('desaturate': 80%),
///   'black': 'brand-blue' ('shade': 30%, 'desaturate': 80%),
/// );
/// ```
///
/// Our `color()` function knows how to interprate that syntax,
/// and compile actual colors based on our map notation.
/// In order to export real color data to Herman,
/// we want to run every value in our map
/// through the color function before exporting.
/// `herman-add` accepts a final variable-length argument
/// for calling a function on each value of the map.
/// Pass in a function name (Sass 3.4-),
/// or first-class function (Sass 3.5+)
/// along with any additional arguments that function might need:
///
/// ```
///  $color-function: get-function('color');
///  @include herman-add('colors', demo-noncolors, $demo-noncolors, $color-function, $args…);
/// ```
///
/// The `color` function will be called on each value
/// before adding it to our `$herman` map.
/// The call happens in this format:
///
/// ```
/// 'color-name': color($value, $args…),
/// ```
///
/// @preview color-palette; key: demo-noncolors
/// @group demo_colors
@include herman-add('colors', 'demo-noncolors', $demo-noncolors, 'color');
