{% import 'utility.macros.j2' as utility %}
{% import 'item/macros.j2' as show %}


{#
  Show Previews
  -------------
  Call the requested previews with the appropriate JSON data.
#}
{% macro show_previews(data, name, args) %}
  {% if data and args %}
    {% set type = args.type %}
    {% set key = args.key or name %}

    {% if type == 'color-palette' %}
      {{ color_palette(data[key]) }}
    {% elif type == 'font-specimen' %}
      {{ font_specimen(key, data[key], args) }}
    {% elif type == 'ratios' %}
      {{ ratios(data[key], args) }}
    {% elif type == 'sizes' %}
      {{ sizes(data[key], args) }}
    {% endif %}

  {% endif %}
{% endmacro %}


{#
  Color Palette
  -------------
  Display color palettes based on JSON map output.
#}
{% macro color_palette(data) %}
  {% set data = data|dictsort(false, 'value') %}

  {% call show.item_section('color-palette', 'Color Preview') %}
    <div class="color-palette">
      {% set next = none %}

      {% for name, value in data %}
        {% if data[loop.index][1] == value %}
          {% set next = [next, name]|join(', ') if next else name %}
        {% else %}
          <div class="color-preview">
            <div class="color-swatch">
              <div class="transparency-grid"></div>
              <div class="color-overlay" style="background-color: {{ value }};"></div>
            </div>
            <div class="color-info">
              {% set name = [next, name]|join(', ') if next else name %}
              <strong class="color-name">
                {% for opt in name|split(', ') %}
                  <span class="color-name-option">
                    {{ opt }}{% if not loop.last %},&nbsp;{% endif %}
                  </span>
                {% endfor %}
              </strong>
              <code class="color-value">{{ value }}</code>
            </div>
          </div>
          {% set next = none %}
      {% endif %}
      {% endfor %}
    </div>
  {% endcall %}
{% endmacro %}


{#
  Font Specimen
  -------------
  Display all font-family specimens,
  including multiple variants.

  @group font-specimen

  @prop {String} name -
    Title for the font-family being displayed.
  @prop {Dict} data -
    All the available data on a given font,
    derived from the Sass JSON export.
  @prop {Dict} args -
    Arbitrary arguments passes along
    in the font-specimen call
    (currently only `show` and `key` are supported).
#}
{% macro font_specimen(name, data, args=none) %}
  <div data-sassdoc-font="{{ name }}">
    <h3 data-sassdoc="font-type">
      {{ utility.link_if(
        content=data.name,
        url=data.source,
        attrs={'data-sassdoc': 'font-name'}
      ) }}

      (<code>{{ name }}</code>)
    </h3>

    <div data-sassdoc="font-stack">
      <b>Stack:</b>
      {% for item in data.stack %}
        {{ item }}{% if not loop.last %},{% endif %}
      {% endfor %}
    </div>

    {% set family = [data.name, data.stack]|join(', ') %}

    {% if args.show %}
      {% for option in args.show|split(', ') %}
        {{ specimen_variant(
          family=family,
          option=option,
          data=data
        ) }}
      {% endfor %}
    {% else %}
      {% for option, path in data %}
        {{ specimen_variant(
          family=family,
          option=option,
          path=path
        ) }}
      {% endfor %}
    {% endif %}
  </div>
{% endmacro %}


{#
  Specimen Variant
  ----------------
  Display a single specimen variant.

  @group font-specimen

  @prop {String} family -
    A CSS-ready value for font-family,
    combining both the font name, and fallback font-stack.
  @prop {String} option -
    The name of a font variant,
    e.g. `bold` or `italic` or `700 italic`.
  @prop {Dict} data [none] -
    Optional font-data for file-path lookup.
  @prop {String} path [none] -
    Optional file-path data,
    if it is already attached to the option.
#}
{% macro specimen_variant(family, option, data=none, path=none) %}
  {# Local variables for parsing variants in the data #}
  {% set weight_options = [
    '100', '200', '300', '400', '500', '600', '700', '800', '900', 'bold'
  ] %}

  {% set style_options = [
    'italic', 'oblique'
  ] %}

  {% set other_options = [
    'normal', 'regular'
  ] %}

  {# Initialize variants #}
  {% set weight = 'normal' %}
  {% set style = 'normal' %}

  {# Split the option into variants, and find files where available #}
  {% set split_option = option|split(' ') %}
  {% set variant_check = split_option[0] %}
  {% set is_variant = true if (variant_check in weight_options or variant_check in style_options or variant_check in other_options) else false %}

  {# If we have an actual variant, display specimen #}
  {% if is_variant %}
    {% set path = data.option if data.option else path %}

    {% for value in split_option %}
      {% set weight = value if (value in weight_options) else weight %}
      {% set style = value if (value in style_options) else style %}
    {% endfor %}

    <div data-specimen-face="{{ option }}">
      <h4 data-specimen="face-name">
        {{ option }}

        {% if path %}
          (<code>{{ path }}</code>)
        {% endif %}
      </h4>
      <div data-specimen="sample" style="font-family: {{ family }}; font-weight: {{ weight }}; font-style: {{ style }};">
        <div data-specimen="aa">Aa</div>
        <div data-specimen="lorem">{{ lorem('alpha') }}</div>
      </div>
    </div>
  {% endif %}
{% endmacro %}


{#
  Lorem
  -----
  Display Lorem Ipsum text for font specimens.

  @group font-specimen

  @prop {'title' | 'body' | 'alpha'} length -
    They type of Lorem Ipsum to display:
    either title-length, paragraph-length,
    or a list of standard characters
    (uppercase, lowercase, numbers, and punctuation).
#}
{% macro lorem(length) %}
  {% if length == 'title' %}
    <span data-specimen-lorem="title">
      Pack my box with five dozen liquor&nbsp;jugs.
    </span>
  {% elif length == 'body' %}
    <span data-specimen-lorem="body">
      A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than&nbsp;now.
    </span>
  {% elif length == 'alpha' %}
    <span data-specimen-lorem="uppercase">
      ABCDEFGHIJKLMNOPQRSTUVWXYZ
    </span>
    <span data-specimen-lorem="lowercase">
      abcdefghijklmnopqrstuvwxyz
    </span>
    <span data-specimen-lorem="symbols">
      1234567890([{“‘,.;:?!$&*’”}])
    </span>
  {% endif %}
{% endmacro %}


{% macro ratios(data, args) %}
  {% for name, value in data %}
    <div data-sassdoc="ratio-preview">
      <div data-sassdoc="ratio-name">
        {{ name }}:
        <code>{{ value }}</code>
      </div>

      {% set counts = {
        '1': 1,
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9,
        '10': 10
      } %}

      <div data-sassdoc="ratio-demos">
        {% set count = counts[args.count] or 6 %}
        {% for demo in range(count) %}
          {% set demo = 1 * (value ** demo) if (value != 'linear') else (demo + 1) %}
          <span data-sassdoc="ratio-demo" style="font-size: {{ demo + 'em' }};">
            {{ demo|round(2) }}
          </span>
        {% endfor %}
      </div>
    </div>
  {% endfor %}
{% endmacro %}


{% macro sizes(data, args) %}
  <div data-sassdoc="size-demos">
    {% for name, value in data %}
      <div data-sassdoc="size-demo">
        <div data-sassdoc="size-details">
          <b data-sassdoc="size-name">{{ name }}:</b>
          <span data-sassdoc="size-value">{{ value }}</span>
        </div>

        {% set style = args.style or 'text' %}
        {% if style != 'output-only' %}
          <div data-size-demo="{{ style }}" style="font-size: {{ value }};">
            {% if style == 'text' %}
              {{ lorem('title') }}
            {% endif %}
          </div>
        {% endif %}
      </div>
    {% endfor %}
  </div>
{% endmacro %}


{% macro icons(item) %}
  {% if item.iframed %}
    <iframe class="render-example" srcdoc="{{ item.iframed }}" width="100%" height="0"></iframe>
  {% endif %}
{% endmacro %}
