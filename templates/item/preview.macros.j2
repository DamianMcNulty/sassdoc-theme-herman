{% import 'item/annotation.macros.j2' as annotation %}
{% import 'item/macros.j2' as show %}


{#
  Show Previews
  -------------
  Call the requested previews with the appropriate JSON data.
#}
{% macro show_previews(data, item) %}
  {% if data and item and (item.preview or item.font) %}
    {% set args = item.preview or item.font %}
    {% set type = args.type if item.preview else 'font' %}
    {% set key = args.key or item.context.origName or item.context.name %}

    {% set preview_options = {
      'color-palette': 'colors',
      'font': 'fonts',
      'ratios': 'ratios',
      'sizes': 'sizes'
    } %}

    {% set data_type = preview_options[type] %}
    {% set data = data[data_type][key] %}

    {% if type == 'color-palette' %}
      {{ color_palette(data) }}
    {% elif type == 'font' %}
      {{ font_specimen(key, data, item.iframed) }}
    {% elif type == 'ratios' %}
      {{ ratios(data, args) }}
    {% elif type == 'sizes' %}
      {{ sizes(data, args) }}
    {% endif %}

  {% endif %}
{% endmacro %}


{#
  Color Palette
  -------------
  Display color palettes based on JSON map output.
#}
{% macro color_palette(data) %}
  {% call show.item_section('color-palette', 'Color Previews') %}
    <div class="color-palette">
      {% for value, items in data|list|groupby('value') %}
        <div class="color-preview">
          <div class="color-swatch">
            <div class="transparency-grid"></div>
            <div class="color-overlay" style="background-color: {{ value }};"></div>
          </div>
          <div class="color-info">
            <strong class="color-name">
              {% for item in items %}
                <span class="color-name-option">{{ item.key }}{% if not loop.last %},&nbsp;{% endif %}</span>
              {% endfor %}
            </strong>
            {% set color = value|colors %}
            {% if color %}
              {% for format in ['hex', 'rgb', 'hsl'] %}
                {% if color[format] %}
                  <code class="color-value">{{ color[format] }}</code>
                {% endif %}
              {% endfor %}
            {% else %}
              <code class="color-value">{{ value }}</code>
            {% endif %}
          </div>
        </div>
      {% endfor %}
    </div>
  {% endcall %}
{% endmacro %}


{#
  Font Specimen
  -------------
  Display all font-family specimens,
  including multiple variants.

  @prop {String} name -
    Title for the font-family being displayed.
  @prop {Dict} data -
    All the available data on a given font,
    derived from the Sass JSON export.
  @prop {String} iframed -
    Rendered font specimen iframe content.
#}
{% macro font_specimen(name, data, iframed) %}
  {% set family = [data.name or name, data.stack]|join(',') %}
  {% set family = '<strong>font-family</strong>: ' + font_names(family) + ';' %}
  {% set family = '<code>' + family + '</code>' %}

  {% call show.item_section('font-specimen', 'Font Preview') %}
    {{ annotation.param_list(
      name=data.name or name,
      url=data.source,
      value_type=name if (name != data.name),
      description=family
    ) }}

    {% if iframed %}
      <iframe class="render-specimen" srcdoc="{{ iframed }}" width="100%" height="0"></iframe>
    {% endif %}
  {% endcall %}
{% endmacro %}



{#
  Specimen Variant
  ----------------
  Display a single specimen variant.

  @prop {String} family -
    A CSS-ready value for font-family,
    combining both the font name, and fallback font-stack.
  @prop {String} option -
    The name of a font variant,
    e.g. `bold` or `italic` or `700 italic`.
  @prop {Dict} data [none] -
    Optional font-data for file-path lookup.
  @prop {String} path [none] -
    Optional file-path data,
    if it is already attached to the option.
#}
{% macro specimen_variant(family, option, data=none, path=none) %}
  {# Local variables for parsing variants in the data #}
  {% set weight_options = [
    '100', '200', '300', '400', '500', '600', '700', '800', '900', 'bold'
  ] %}

  {% set style_options = [
    'italic', 'oblique'
  ] %}

  {% set other_options = [
    'normal', 'regular'
  ] %}

  {# Initialize variants #}
  {% set weight = 'normal' %}
  {% set style = 'normal' %}

  {# Split the option into variants, and find files where available #}
  {% set split_option = option|split(' ') %}
  {% set variant_check = split_option[0] %}
  {% set is_variant = true if (variant_check in weight_options or variant_check in style_options or variant_check in other_options) else false %}

  {# If we have an actual variant, display specimen #}
  {% if is_variant %}
    {% set path = data.option if data.option else path %}

    {% for value in split_option %}
      {% set weight = value if (value in weight_options) else weight %}
      {% set style = value if (value in style_options) else style %}
    {% endfor %}

    <div data-specimen-face="{{ option }}">
      <h4 data-specimen="face-name">
        {{ option }}

        {% if path %}
          (<code>{{ path }}</code>)
        {% endif %}
      </h4>
      <div data-specimen="sample"
        style="font-family: {{ font_names(family) }}; font-weight: {{ weight }}; font-style: {{ style }};">
        <div data-specimen="aa">Aa</div>
        <div data-specimen="lorem">{{ lorem('alpha') }}</div>
      </div>
    </div>
  {% endif %}
{% endmacro %}


{%- macro font_names(family) -%}
  {%- set generic = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy'] -%}
  {%- for name in family|split(',') -%}
    {{ name if (name in generic) else "'" + name + "'" }}
    {%- if not loop.last %}, {% endif -%}
  {%- endfor -%}
{%- endmacro -%}


{#
  Lorem
  -----
  Display Lorem Ipsum text for font specimens.

  @prop {'title' | 'body' | 'alpha'} length -
    They type of Lorem Ipsum to display:
    either title-length, paragraph-length,
    or a list of standard characters
    (uppercase, lowercase, numbers, and punctuation).
#}
{% macro lorem(length) %}
  {% if length == 'title' %}
    <span data-specimen-lorem="title">
      Pack my box with five dozen liquor&nbsp;jugs.
    </span>
  {% elif length == 'body' %}
    <span data-specimen-lorem="body">
      A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than&nbsp;now.
    </span>
  {% elif length == 'alpha' %}
    <span data-specimen-lorem="uppercase">
      ABCDEFGHIJKLMNOPQRSTUVWXYZ
    </span>
    <span data-specimen-lorem="lowercase">
      abcdefghijklmnopqrstuvwxyz
    </span>
    <span data-specimen-lorem="symbols">
      1234567890([{“‘,.;:?!$&*’”}])
    </span>
  {% endif %}
{% endmacro %}


{% macro ratios(data, args) %}
  {% call show.item_section('ratio-preview', 'Ratio Previews') %}
    {% for name, value in data %}
      <div data-sassdoc="ratio-preview">
        {{ annotation.param_list(
          name=name + ':',
          value=value
        ) }}

        {% set counts = {
          '1': 1,
          '2': 2,
          '3': 3,
          '4': 4,
          '5': 5,
          '6': 6,
          '7': 7,
          '8': 8,
          '9': 9,
          '10': 10
        } %}

        <div data-sassdoc="ratio-demos">
          {% set count = counts[args.count] or 6 %}
          {% for demo in range(count) %}
            {% set demo = 1 * (value ** demo) if (value != 'linear') else (demo + 1) %}
            <span data-sassdoc="ratio-demo" style="font-size: {{ demo + 'em' }};">
              {{ demo|round(2) }}
            </span>
          {% endfor %}
        </div>
      </div>
    {% endfor %}
  {% endcall %}
{% endmacro %}


{% macro sizes(data, args) %}
  {% call show.item_section('size-preview', 'Size Previews') %}
    {% for name, value in data %}
      <div data-sassdoc="size-preview">
        {{ annotation.param_list(
          name=name + ':',
          value=value
        ) }}

        {% set style = args.style or 'text' %}
        {% if style != 'output-only' %}
          <div data-size-demo="{{ style }}" style="font-size: {{ value }};">
            {% if style == 'text' %}
              {{ lorem('title') }}
            {% endif %}
          </div>
        {% endif %}
      </div>
    {% endfor %}
  {% endcall %}
{% endmacro %}


{% macro icons(item) %}
  {% if item.icons and item.icons|length and item.iframed %}
    {% call show.item_section('icon-preview', 'Icon Previews: ', item.iconsPath) %}
      <iframe class="render-icons" srcdoc="{{ item.iframed }}" width="100%" height="0"></iframe>
    {% endcall %}
  {% endif %}
{% endmacro %}
